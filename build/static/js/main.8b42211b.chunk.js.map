{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","employees","searchField","className","Form","Group","controlId","Label","Control","type","placeholder","Button","variant","striped","bordered","hover","name","phone","email","dob","map","employee","index","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qVAwFeA,E,kDA1Eb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,UAAW,GACXC,YAAa,IALH,E,qDAoCV,OACE,yBAAKC,UAAU,kBAKb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,cACpB,kBAACF,EAAA,EAAKG,MAAN,eACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,SAASC,YAAY,YAG1C,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,UAA/B,WAIA,6BAEF,kBAAC,IAAD,CAAsBI,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC1C,+BACE,4BACE,oCACA,qCACA,qCACA,+CAGJ,+BAzCY,CAChB,CAACC,KAAM,kBAAmBC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,aAC/E,CAACH,KAAM,aAAcC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,aAC1E,CAACH,KAAM,eAAgBC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,cAC5E,CAACH,KAAM,kBAAmBC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,aAC/E,CAACH,KAAM,cAAeC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,cAC3E,CAACH,KAAM,cAAeC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,YAC3E,CAACH,KAAM,kBAAmBC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,aAC/E,CAACH,KAAM,cAAeC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,aAC3E,CAACH,KAAM,eAAgBC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,aAC5E,CAACH,KAAM,cAAeC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,YAC3E,CAACH,KAAM,iBAAkBC,MAAO,eAAgBC,MAAO,iBAAkBC,IAAK,eAgC7DC,KAtDE,SAACC,EAAUC,GAChC,OACE,wBAAIC,IAAKD,GACL,4BAAKD,EAASL,MACd,4BAAKK,EAASJ,OACd,4BAAKI,EAASH,OACd,4BAAKG,EAASF,gB,GAnBRK,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b42211b.chunk.js","sourcesContent":["import React , { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport * as ReactBootStrap from 'react-bootstrap';\n\nimport { Form } from 'react-bootstrap';\nimport { Button } from 'react-bootstrap';\n\n// import { SearchForm } from \"./components/search-form.component\";\n// import { SearchBox } from '../../../monsters-rolodex/src/components/search-box/search-box.component';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      employees: [],\n      searchField: ''\n    }\n  }\n\n  render() {\n\n    const renderEmployee = (employee, index) => {\n      return(\n        <tr key={index}>\n            <td>{employee.name}</td>\n            <td>{employee.phone}</td>\n            <td>{employee.email}</td>\n            <td>{employee.dob}</td>\n          </tr>\n        )\n      }\n\n      const employees = [\n        {name: \"Brandon Jenkins\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"1/20/1997\"},\n        {name: \"Tim Willis\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"6/15/1975\"},\n        {name: \"Ashley Jones\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"10/11/2000\"},\n        {name: \"Danielle Norris\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"6/19/1985\"},\n        {name: \"Louis Toney\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"12/25/1962\"},\n        {name: \"Jim Chutney\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"5/9/1951\"},\n        {name: \"Taargus Taargus\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"9/26/1976\"},\n        {name: \"Tony Tarbus\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"4/24/1983\"},\n        {name: \"Jimmy Rangus\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"8/11/1979\"},\n        {name: \"Steve Brule\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"9/5/1988\"},\n        {name: \"Eric Heidecker\", phone: \"713-555-1234\", email: \"info@email.com\", dob: \"11/26/1995\"},\n      ]\n\n      return (\n        <div className=\"employee-table\">\n          {/* <SearchForm \n            search={this.StaticRange.search}\n          /> */}\n\n          <Form>\n            <Form.Group controlId=\"formSearch\">\n              <Form.Label>Search</Form.Label>\n              <Form.Control type=\"search\" placeholder=\"Search\" />\n            </Form.Group>\n\n            <Button variant=\"primary\" type=\"submit\">\n              Submit\n            </Button>\n          </Form>\n            <br />\n\n          <ReactBootStrap.Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Phone</th>\n                <th>Email</th>\n                <th>Date of Birth</th>\n              </tr>\n            </thead>\n            <tbody>\n              {/* {employees.map(renderEmployee)} */}\n              {employees.map(renderEmployee)}\n            </tbody>\n          </ReactBootStrap.Table>\n        </div>\n      );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}